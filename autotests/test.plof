var print = (x) { fythe { (Print (Associate {plof{x}} (Null))) }; True }

// object prototypes
var x = Object:[x=42]
var y = x:[]
var z = y:[]

print(z.x) // 42
x.x = 24
print(y.x) // 24
print(z.x) // 42

print 99 // 99


// function expressions and applications
var x = { 42 } 0
print x // 42

var x = (x) { 42 } 0
print x // 42

(x) { print x } 42 // 42

var x = (x, y) { x } 42 24
print x // 42

print 99 // 99


// call by name
var x = (x) { 0 }
x (print 0) // should print nothing

var x = (x) { x; x; }
x (print 1) // should print only one 1

print 99 // 99


// forced reëvaluation
var x = (x) {
    forceEval x
    forceEval x
    forceEval x
}

x (print 2) // should print 2 three times

print 99 // 99


// booleans
True→ifTrue (print 1) // 1
False→ifTrue (print 2) // nothing
(True && False)→ifTrue (print 3) // nothing
(True || False)→ifTrue (print 4) // 4
(True || (print 50 || False))→ifTrue (print 5) // 5, NO 50
(False || (print 6 || True))→ifTrue (print 7) // 6, 7
(False || (print 8 || True))→ifFalse (print 9) // 8
(False && (print 9 || True))→ifFalse (print 10) // 10

print 99 // 99


// comparisons (first bit)
var x = Object:[]
var y = Object:[]
(x == y)→ifTrue (print 1) // nothing
(x == x)→ifTrue (print 2) // 2
// FIXME: identical comparisons

print 99 // 99


// conditionals and loops
if True ( // 42
    print 42
) else (
    print 0
)
if False ( // 24
    print 0
) else (
    print 24
)
var x = 10
while (fythe { (IGte {plof{x}} 0) }) ( // [10, 0], FIXME
    print x
    x = fythe { (ISub {plof{x}} 1) } // FIXME
)
for (x = 0) (fythe{(ILt {plof{x}} 10)}) (x = fythe{(IAdd {plof{x}} 1)}) ( // [0,10), FIXME
    print x
)

print 99 // 99
