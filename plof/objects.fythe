/*
 * Implementation of Plof's object model. Plof is Fythe-PO-compatible, so see
 * FytheCore's po.fythe for more information.
 *
 * Copyright (c) 2007-2011 Gregor Richards
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

fml {
    plofPO = obj(
        // parent
        null,

        // Member
        fun() {
            if (mcontains(arg[0], 1, arg[1])) {
                // direct, the easy case
                arg[0]@1->(arg[1]);
            } else {
                // indirect, use a helper
                global.plofMemberIndirect(arg[0], arg[1]);
            }
        },

        // MemberSet
        fun() {
            arg[0]@1->(arg[1]) = arg[2];
        },

        // ToString (unimpl)
        fun() {
            "[Plof object]";
        }
    );

    // simple function for creating a child of an object
    fun bplofChild() {
        temp(1) = new(2);
        minit(temp(1), 1);
        temp(1)[0] = concat(arg[0][0], obj(temp(1)));
        temp(1);
    }

    // the (slow) member function for indirect members
    fun plofMemberIndirect(obje, nm) {
        // go through looking for the value
        cobj = null;
        val = null;
        found = 0;
        for (i = length(obje[0]) - 1; i >= fythe { (PO.HeaderSize) }; i = i - 1) {
            cobj = obje[0][i];
            if (mcontains(cobj, 1, nm)) {
                // found it!
                found = 1;
                val = cobj@1->(nm);
                i = length(obje);
            }
        }

        if (found) {
            // do we need to copy it?
            if (val !== null) {
                if (val[0][0] === cobj) {
                    // yes, copy it
                    val = bplofChild.(val);
                    val[0][0] = obje;
                }
            }
            obje@1->(nm) = val;
        }

        val;
    }

    // combine with decls (make a subtype)
    fun bplofCombineDecls() {
        temp(2) = global.bplofChild.(arg[0]); // FIXME: shouldn't use lookup here
        for (temp(1) = 0; temp(1) < length(arg[1]); temp(1) = temp(1) + 2) {
            temp(2)@1->(arg[1][temp(1)]) = arg[1][temp(1)+1];
        }
        temp(2);
    }
    fytheGlobal()[fythe{(Plof.Globals.CombineDecls)}] = bplofCombineDecls;

    plofObject[0] = concat(plofPO, obj(plofObject));
}
