/*
 * Implementation of Plof functions and calls.
 *
 * Copyright (c) 2007-2012 Gregor Richards
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

grammar {
    Plof.Assign => Plof.Apply

    Plof.Apply = Plof.Apply.Next => $0
    Plof.Apply = Plof.Apply Plof.Apply.Next => (Call $0 (Plof.Function $1))

    Plof.Primary = "\{"n Plof.Statements "\}" => (Plof.Function $1)

    /* note that this is ambiguous, as it could also be interpreted as
     * (Apply (ParenExp) (FuncLiteral))
     * The ordering prevents ambiguous expansion, as we always do innermost,
     * LIFO, greedily */
    /* this desugars into a currying functions */
    Plof.Primary = "\("n Plof.Params "\)" "\{"n Plof.Statements "\}" =>
        (Plof.MultiParamFunction $1 $4)

    Plof.Params = Plof.Identifier => (Plof.Param $0)
    Plof.Params = Plof.Identifier ","n Plof.Params => (Plof.Params $0 $2)

    Plof.Member = Plof.Member "â†’"n Plof.Identifier =>
        (Call
            (Plof.Member (TempSet 1 $0) $2)
            (Associate
                (Plof.Function (Member (This) 0))
                (Object (Temp 1))
            )
        )
}

transforms {
    Plof.Optim => Plof.CompileFunctions /* must be before Plof.Resolve */

    Plof.CompileFunctions {
        (Plof.MultiParamFunction (Plof.Params first rest) b) =>
            (Plof.Function (Seq
                (Plof.ParamObjDecl first)
                (Plof.MultiParamFunction rest b)
            ))

        (Plof.MultiParamFunction (Plof.Param nm) b) =>
            (Plof.Function (Seq
                (Plof.ParamObjDecl nm)
                b
            ))

        (Plof.ParamObjDecl nm) =>
            (Plof.Assign (Plof.ParamDecl nm)
                (Object
                    (Function (Seq
                        (MemberSet (Arg) 2
                            (Call (Member (Arg) 1) (Null))
                        )
                        (MemberSet (Arg) 0 (Function
                            (Member (Arg) 2)
                        ))
                        (Member (Arg) 2)
                    ))
                    (Arg)
                    (Null)
                )
            )
    }
}

fythe {
    (MemberSet (Global) (Plof.Globals.Function)
        (Associate
            (Function {plof{ Object }})
            {fml{ bplofChild.(plofObject); }}
        )
    )

    (MSet (Global) (Plof.Globals.GlobalScope) Function (Member (Global) (Plof.Globals.Function)))
    (MSet (Member (Global) (FML.Global)) 0 plofFunction (Member (Global) (Plof.Globals.Function)))
}

fml {
    // function to make new function objects
    fun bplofNewFunction() {
        temp(1) = global.bplofChild.(global.plofFunction);
        temp(1) = concat(temp(1), obj(arg));
        temp(1);
    }

    fythe{(Global)}[fythe{(Plof.Globals.NewFunction)}] = bplofNewFunction;
}
