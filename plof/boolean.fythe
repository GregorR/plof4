/*
 * Boolean logic.
 *
 *  Copyright (c) 2008, 2012 Gregor Richards
 *  
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to
 *  deal in the Software without restriction, including without limitation the
 *  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 *  sell copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *  
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *  
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 *  IN THE SOFTWARE.
 */

grammar {
    Plof.Assign => Plof.Or

    Plof.Or = Plof.Or "\|\|" Plof.Or.Next => plof {
        $0.opOr($2)
    }
    Plof.Or = Plof.Or.Next => $0
    Plof.Or => Plof.And

    Plof.And = Plof.And "&&" Plof.And.Next => plof {
        $0.opAnd($2)
    }
    Plof.And = Plof.And.Next => $0
    Plof.And => Plof.Unop

    Plof.Unop = "\!" Plof.Unop => plof {
        $1.opNot()
    }
    Plof.Unop = Plof.Unop.Next => $0
}

plof {
    // Object is true for logic unless it's False
    Object := [
        opOr = (x) { True }
        opAnd = (x) { x }
        opNot = { False }
    ]
    
    // True and False are both Bools
    var Bool = Object : [
        ifTrue = (x) { this }
        ifFalse = (x) { this }
    ]
    
    var True = Bool : [
        ifTrue = (x) { x; this }
    ]

    var False = Bool : [
        ifFalse = (x) { x; this }
    
        opOr = (x) { x }
        opAnd = (x) { False }
        opNot = { True }
    ]
}
