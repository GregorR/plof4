/*
 * Boolean logic.
 *
 * Copyright (c) 2008, 2012 Gregor Richards
 *  
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
 * SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION
 * OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

grammar {
    Plof.Assign => Plof.Or

    Plof.Or = Plof.Or "\|\|" Plof.Or.Next => plof {
        $0→opOr $2
    }
    Plof.Or = Plof.Or.Next => $0
    Plof.Or => Plof.And

    Plof.And = Plof.And "&&" Plof.And.Next => plof {
        $0→opAnd $2
    }
    Plof.And = Plof.And.Next => $0
    Plof.And => Plof.Unop

    Plof.Unop = "\!" Plof.Unop => plof {
        $1→opNot
    }
    Plof.Unop = Plof.Unop.Next => $0
}

plof {
    // Object is true for logic unless it's False
    Object := [
        opOr = (this, x) { True }
        opAnd = (this, x) { x }
        opNot = (this) { False }
    ]
    
    // True and False are both Bools
    var Bool = Object : [
        ifTrue = (this, x) { this }
        ifFalse = (this, x) { this }
    ]
    
    var True = Bool : [
        ifTrue = (this, x) { x; this }
    ]

    var False = Bool : [
        ifFalse = (this, x) { x; this }
    
        opOr = (this, x) { x }
        opAnd = (this, x) { False }
        opNot = (this) { True }
    ]
}
